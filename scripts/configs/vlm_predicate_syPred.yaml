# Use VLM to propose predicates.
---
APPROACHES:
  learn_all:
    NAME: "vlm_online_invention"
    FLAGS: []
ENVS:
  stick_button:
    # NAME: "stick_button"
    # NAME: "pybullet_blocks"
    NAME: "pybullet_coffee"
    # NAME: "coffee"
ARGS: 
  # []
  - "debug"
  # - "use_gui"
  # - "load_approach"
FLAGS:
  num_train_tasks: 40
  num_test_tasks: 20
  option_learner: no_learning # include all options by flagging no learning
  sampler_learner: oracle
  strips_learner: "cluster_and_intersect"
  excluded_predicates: "all"
  min_perc_data_for_nsrt: 3
  timeout: 30 #300

  # Env settings
  rgb_observation: False
  render_init_state: False # True for NSP
  pybullet_control_mode: "reset"
  sesame_check_expected_atoms: False
  coffee_twist_sampler: False

  # Predicate refinement parameters
  grammar_search_search_algorithm: "gbfs" # "hill_climbing"
  grammar_search_predicate_cost_upper_bound: 10
  grammar_search_grammar_use_single_feature: False
  grammar_search_grammar_use_skip_grammar: False
  grammar_search_grammar_includes_negation: True
  grammar_search_grammar_includes_foralls: True
  grammar_search_prune_redundant_preds: False
  load_llm_pred_invent_dataset: False
  save_llm_pred_invent_dataset: False # can't pickle rendered states

  # Predicate Invention params (main ones to adjust)
  neu_sym_predicate: False # True for NSP
  vlm_predicator_render_option_state: False # True for NSP
  llm_predicator_use_grammar: False
  vlm_predicator_oracle_base_grammar: True
  llm_predicator_oracle_learned: True 
  # More Predicate invent params (Same for all configurations)
  save_nsp_image_patch_before_query: False
  vlm_model_name: "gemini-1.5-pro"
  vlm_temperature: 0
  vlm_use_chat_mode: True
  query_vlm_for_each_assertion: False
  query_vlm_for_each_predicate: False
  llm_openai_max_response_tokens: 4096
START_SEED: 2
NUM_SEEDS: 1
...
