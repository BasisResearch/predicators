You are an expert roboticist and AI researcher tasked with inventing task-specific state abstraction predicates for effective and efficient robotic planning.

Class definitions for `Predicate` and `State` are:
```python
class Predicate:
    """
    A class representing a predicate (a lifted classifier over states) in the 
    context of AI task planning.
    A predicate is mainly a function that describes a property or characteristic 
    of states. The function takes a state and a sequence of objects as input, 
    and returns a boolean value indicating whether the property holds for those 
    objects in that state.

    Attributes:
    -----------
    name : str
        The name of the predicate.

    types : Sequence[Type]
        The types of the objects that the predicate applies to. This sequence 
        should have the same length as the sequence of objects passed to the 
        classifier.

    _classifier : Callable[[State, Sequence[Object]], bool]
        The classifier function for the predicate. This function takes a state 
        and a sequence of objects as input, and returns a boolean value. The 
        objects in the sequence should correspond one-to-one with the types in 
        the 'types' attribute. The classifier should return True if the 
        predicate holds for those objects in that state, and False otherwise.
    """    
    name: str
    types: Sequence[Type]
    # The classifier takes in a complete state and a sequence of objects
    # representing the arguments. These objects should be the only ones
    # treated "specially" by the classifier.
    _classifier: Callable[[State, Sequence[Object]], bool]

class State:
    """
    A class representing the low-level state of the world.

    Attributes:
    -----------
    data : Dict[Object, Array]
        A dictionary mapping objects to their feature vectors. The feature vectors are numpy arrays.

    simulator_state : Optional[Any]
        Some environments may need to store additional simulator state. This field is provided for that purpose. It is optional and defaults to None.

    Methods:
    --------
    get(self, obj: Object, feature_name: str) -> Any:
        This method looks up an object feature by name. It returns the value of 
        the feature.

    get_objects(self, object_type: Type) -> List[Object]:
        This method returns objects of the given type in the order of 
        __iter__().
    """
    data: Dict[Object, Array]
    # Some environments will need to store additional simulator state, so
    # this field is provided.
    simulator_state: Optional[Any] = None

    def get(self, obj: Object, feature_name: str) -> Any:
        """
        Look up an object feature by name.

        Parameters:
        -----------
        obj : Object
            The object whose feature value is to be retrieved.
        feature_name : str
            The name of the feature to be retrieved.

        Returns:
        --------
        Any
            The value of the specified feature for the given object.

        Raises:
        -------
        ValueError
            If the specified feature name is not found in the object's type feature names.
        
        Examples:
        ---------
        >>> # An example for predicate Covers
        >>> _block_type = Type("block", ["is_block", "is_target", "width", 
                "pose", "grasp"])
        >>> _target_type = Type("target", ["is_block", "is_target", "width", 
                "pose"])
        >>> block1 = Object("block1", _block_type)
        >>> target1 = Object("target1", _target_type)
        >>> state = State({
                block1: np.array([1.0, 0.0, 0.1, 0.2, -1.0]), 
                target1: np.array([0.0, 1.0, 0.05, 0.4])})
        >>> def _Covers_holds(state: State, objects: Sequence[Object]) -> 
                    bool:
        >>>     block, target = objects
        >>>     block_pose = state.get(block, "pose")
        >>>     block_width = state.get(block, "width")
        >>>     target_pose = state.get(target, "pose")
        >>>     target_width = state.get(target, "width")
        >>>     return (block_pose-block_width/2 <= \
                        target_pose-target_width/2) and \
                        (block_pose+block_width/2 >= \
                        target_pose+target_width/2) and \
                        state.get(block, "grasp") == -1
        >>> _Covers = Predicate("Covers", [_block_type, _target_type],
                        _Covers_holds)

        >>> # Another example for predicate On
        >>> _block_type = Type("block", ["pose_x", "pose_y", "pose_z", 
                            "held", "color_r", "color_g", "color_b"])
        >>> block1 = Object("block1", _block_type)
        >>> block2 = Object("block2", _block_type)
        >>> state = State({
                block1: np.array([1.0, 3.0, 0.2, 0.0, 1.0, 0.0, 0.0]),
                block2: np.array([2.0, 3.0, 0.3, 0.0, 0.0, 1.0, 0.0])})
        >>> on_tol = 0.01
        >>> def _On_holds(self, state: State, objects: Sequence[Object]) ->\ 
                bool:
        >>>     block1, block2 = objects
        >>>     if state.get(block1, "held") >= self.held_tol or \
        >>>        state.get(block2, "held") >= self.held_tol:
        >>>         return False
        >>>     x1 = state.get(block1, "pose_x")
        >>>     y1 = state.get(block1, "pose_y")
        >>>     z1 = state.get(block1, "pose_z")
        >>>     x2 = state.get(block2, "pose_x")
        >>>     y2 = state.get(block2, "pose_y")
        >>>     z2 = state.get(block2, "pose_z")
        >>>     return np.allclose([x1, y1, z1], 
                        [x2, y2, z2 + self._block_size],
                        atol=on_tol)
        >>> _On = Predicate("On", [_block_type, _block_type],
                            _On_holds)
        """

    def get_objects(self, object_type: Type) -> List[Object]:
        """
        Return objects of the given type in the order of __iter__().

        Parameters:
        -----------
        object_type : Type
            The type of the objects to be retrieved.

        Returns:
        --------
        List[Object]
            A list of objects of the specified type, in the order they are 
            iterated over in the state.

        Examples:
        ---------
        >>> _robot_type = Type("robot",
                                ["x", "y", "z", "tilt", "wrist", "fingers"])
        >>> _cup_type = Type("cup",
            ["x", "y", "capacity_liquid", "target_liquid", "current_liquid"])
        >>> robot = Object("robby", _robot_type)
        >>> cup1 = Object("cup1", _cup_type)
        >>> cup2 = Object("cup2", _cup_type)
        >>> state = State({
                        robot: np.array([5.0, 5.0, 10.0, 0.0, 0.0, 0.4]),
                        cup1: np.array([3.0, 2.0, 1.0, 0.75, 0.0]),
                        cup2: np.array([5.0, 6.0, 1.5, 1.125, 0.0])})
        >>> def _NotAboveCup_holds(state: State,
        >>>                        objects: Sequence[Object]) -> bool:
        >>>     robot, jug = objects
        >>>     for cup in state.get_objects(_cup_type):
        >>>         if _robot_jug_above_cup(state, cup):
        >>>             return False
        >>>     return True
        >>> _NotAboveCup = Predicate("NotAboveCup", [_robot_type, _jug_type],
                                    _NotAboveCup_holds)

        """
```


The environment includes the following object-type variables:
```python
# Types
_obj_type = Type("obj", [
    "pose_x", "pose_y", "pose_z", "dirtiness", "wetness", "color",
    "grasp", "held"
])
_box_type = Type("box", ["pose_x", "pose_y", "color"])
_lid_type = Type("lid", ["is_open"])
_shelf_type = Type("shelf", ["pose_x", "pose_y", "color"])
_robot_type = Type("robot", ["pose_x", "pose_y", "fingers"])
```


The initial set of predicates used to describe goals includes:
{'IsBoxColor(?x, ?y)', 'IsShelfColor(?x, ?y)', 'InBox(?x, ?y)', 'InShelf(?x, ?y)'}

The environment defines the following constants that can be used in defining predicates:
```python
# Constants present in goal predicates
shelf_l: ClassVar[float] = 2.0  # shelf length
shelf_lb: ClassVar[float] = 1.
shelf_ub: ClassVar[float] = shelf_lb + shelf_l - 0.05
color_tol: ClassVar[float] = 1e-2
box_s: ClassVar[float] = 0.8  # side length
box_y: ClassVar[float] = 0.5  # y coordinate
box_lb: ClassVar[float] = box_y - box_s / 10
box_ub: ClassVar[float] = box_y + box_s / 10
```

Predicate InShelf(?x, ?y) is defined by
```python
def _InShelf_holds(self, state: State, objects: Sequence[Object]) -> bool:
    obj, _ = objects
    # If the object is held, not yet in shelf
    if _obj_is_held(state, obj):
        return False
    # Check pose of object
    obj_y = state.get(obj, "pose_y")
    return shelf_lb < obj_y < shelf_ub
_InShelf = Predicate("InShelf",
                                  [_obj_type, _shelf_type],
                                  _InShelf_holds)
```

Predicate IsShelfColor(?x, ?y) is defined by
```python
def _IsShelfColor_holds(self, state: State,
                        objects: Sequence[Object]) -> bool:
    obj, shelf = objects
    return abs(state.get(obj, "color") -
               state.get(shelf, "color")) < color_tol
_IsShelfColor = Predicate("IsShelfColor",
                                       [_obj_type, _shelf_type],
                                       _IsShelfColor_holds)
```

Predicate IsBoxColor(?x, ?y) is defined by
```python
def _IsBoxColor_holds(self, state: State,
                      objects: Sequence[Object]) -> bool:
    obj, box = objects
    return abs(state.get(obj, "color") -
               state.get(box, "color")) < color_tol
_IsBoxColor = Predicate("IsBoxColor",
                                     [_obj_type, _box_type],
                                     _IsBoxColor_holds)
```

Predicate InBox(?x, ?y) is defined by
```python
def _InBox_holds(self, state: State, objects: Sequence[Object]) -> bool:
    obj, _ = objects
    # If the object is held, not yet in box
    if _obj_is_held(state, obj):
        return False
    # Check pose of object
    obj_y = state.get(obj, "pose_y")
    return box_lb < obj_y < box_ub
_InBox = Predicate("InBox", [_obj_type, _box_type],
                                _InBox_holds)
```


The set of parameterized options includes:
Paint(?robot:robot)
Pick(?robot:robot, ?obj:obj)
Place(?robot:robot)
Wash(?robot:robot)
Dry(?robot:robot)
OpenLid(?robot:robot, ?lid:lid)

The existing abstract action operators utilizing these options are:
Wash:
    Parameters: [?obj:obj, ?robot:robot]
    Preconditions: []
    Add Effects: []
    Delete Effects: []
    Ignore Effects: []
    Option Spec: Wash(?robot:robot)
PaintToBox:
    Parameters: [?obj:obj, ?box:box, ?robot:robot]
    Preconditions: []
    Add Effects: [IsBoxColor(?obj:obj, ?box:box)]
    Delete Effects: []
    Ignore Effects: []
    Option Spec: Paint(?robot:robot)
PlaceInShelf:
    Parameters: [?obj:obj, ?shelf:shelf, ?robot:robot]
    Preconditions: []
    Add Effects: [InShelf(?obj:obj, ?shelf:shelf)]
    Delete Effects: []
    Ignore Effects: []
    Option Spec: Place(?robot:robot)
PlaceOnTableFromHoldingSide:
    Parameters: [?obj:obj, ?robot:robot]
    Preconditions: []
    Add Effects: []
    Delete Effects: []
    Ignore Effects: []
    Option Spec: Place(?robot:robot)
PickFromTop:
    Parameters: [?obj:obj, ?robot:robot]
    Preconditions: []
    Add Effects: []
    Delete Effects: []
    Ignore Effects: []
    Option Spec: Pick(?robot:robot, ?obj:obj)
PlaceInBox:
    Parameters: [?obj:obj, ?box:box, ?robot:robot]
    Preconditions: []
    Add Effects: [InBox(?obj:obj, ?box:box)]
    Delete Effects: []
    Ignore Effects: []
    Option Spec: Place(?robot:robot)
PaintToShelf:
    Parameters: [?obj:obj, ?shelf:shelf, ?robot:robot]
    Preconditions: []
    Add Effects: [IsShelfColor(?obj:obj, ?shelf:shelf)]
    Delete Effects: []
    Ignore Effects: []
    Option Spec: Paint(?robot:robot)
OpenLid:
    Parameters: [?lid:lid, ?robot:robot]
    Preconditions: []
    Add Effects: []
    Delete Effects: []
    Ignore Effects: []
    Option Spec: OpenLid(?robot:robot, ?lid:lid)
PickFromSide:
    Parameters: [?obj:obj, ?robot:robot]
    Preconditions: []
    Add Effects: []
    Delete Effects: []
    Ignore Effects: []
    Option Spec: Pick(?robot:robot, ?obj:obj)
Dry:
    Parameters: [?obj:obj, ?robot:robot]
    Preconditions: []
    Add Effects: []
    Delete Effects: []
    Ignore Effects: []
    Option Spec: Dry(?robot:robot)
PlaceOnTableFromHoldingTop:
    Parameters: [?obj:obj, ?robot:robot]
    Preconditions: []
    Add Effects: []
    Delete Effects: []
    Ignore Effects: []
    Option Spec: Place(?robot:robot)

The agent attempted the training tasks by bilevel planning (first plan with the ground action operators then execute its corresponding ground options), collecting these results:
Ground option OpenLid(robby:robot, box_lid:lid) was applied on 4 states and *successfully* executed on 2/4 states (ground truth positive states).
  Out of the 2 GT positive states, with the current predicates and operators, 2/2 states *satisfy* at least one of its operators' precondition (true positives):
  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -3.7, 'pose_z': 0.3, 'dirtiness': 0.7, 'wetness': 0.0, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.9},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.3},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -8.0, 'fingers': 1.0}}

  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -3.3, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.0, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.3},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.9},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -6.8, 'fingers': 1.0}}

Ground option OpenLid(robby:robot, box_lid:lid) was applied on 4 states and *failed* to executed on 2/4 states (ground truth negative states).
  Out of the 2 GT negative states, with the current predicates and operators, 2/2 states *satisfy* at least one of its operators' precondition (false positives):
  {'box_lid:lid': {'is_open': 1.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -7.5, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.7, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.3},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.9},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -5.5, 'fingers': 1.0}}

Ground option Place(robby:robot) was applied on 85 states and *successfully* executed on 10/85 states (ground truth positive states).
  Out of the 10 GT positive states, with the current predicates and operators, 10/10 states *satisfy* at least one of its operators' precondition (true positives), to list 3:
  {'box_lid:lid': {'is_open': 1.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -4.4, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.0, 'color': 0.8, 'grasp': 1.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.8},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.2},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -4.4, 'fingers': 0.0}}

  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -5.2, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.0, 'color': 0.0, 'grasp': 1.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.4},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.8},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -5.2, 'fingers': 0.0}}

  {'box_lid:lid': {'is_open': 1.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -2.1, 'pose_z': 0.3, 'dirtiness': 0.9, 'wetness': 0.0, 'color': 0.0, 'grasp': 1.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.9},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.3},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -2.1, 'fingers': 0.0}}

Ground option Place(robby:robot) was applied on 85 states and *failed* to executed on 75/85 states (ground truth negative states).
  Out of the 75 GT negative states, with the current predicates and operators, 75/75 states *satisfy* at least one of its operators' precondition (false positives), to list 3:
  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -3.7, 'pose_z': 0.3, 'dirtiness': 0.7, 'wetness': 0.0, 'color': 0.0, 'grasp': 1.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.9},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.3},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -8.0, 'fingers': 0.0}}

  {'box_lid:lid': {'is_open': 1.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': 0.6, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.9, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.8},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.2},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -4.4, 'fingers': 1.0}}

  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -1.5, 'pose_z': 0.3, 'dirtiness': 0.9, 'wetness': 0.0, 'color': 0.0, 'grasp': 1.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.3},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 1.0},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -1.5, 'fingers': 0.0}}

Ground option Pick(robby:robot, obj0:obj) was applied on 10 states and *successfully* executed on 4/10 states (ground truth positive states).
  Out of the 4 GT positive states, with the current predicates and operators, 4/4 states *satisfy* at least one of its operators' precondition (true positives):
  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -3.7, 'pose_z': 0.3, 'dirtiness': 0.7, 'wetness': 0.0, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.9},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.3},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -8.0, 'fingers': 1.0}}

  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -3.3, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.0, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.3},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.9},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -6.8, 'fingers': 1.0}}

  {'box_lid:lid': {'is_open': 1.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -4.0, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.0, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.8},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.3},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -9.4, 'fingers': 1.0}}

Ground option Pick(robby:robot, obj0:obj) was applied on 10 states and *failed* to executed on 6/10 states (ground truth negative states).
  Out of the 6 GT negative states, with the current predicates and operators, 6/6 states *satisfy* at least one of its operators' precondition (false positives), to list 3:
  {'box_lid:lid': {'is_open': 1.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': 0.6, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.9, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.8},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.2},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -4.4, 'fingers': 1.0}}

  {'box_lid:lid': {'is_open': 1.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -2.1, 'pose_z': 0.3, 'dirtiness': 0.9, 'wetness': 0.0, 'color': 0.0, 'grasp': 1.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.9},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.3},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -2.1, 'fingers': 0.0}}

  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -5.2, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.0, 'color': 0.4, 'grasp': 1.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.4},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.8},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -5.2, 'fingers': 0.0}}

Ground option Dry(robby:robot) was applied on 5 states and *successfully* executed on 1/5 states (ground truth positive states).
  Out of the 1 GT positive states, with the current predicates and operators, 1/1 states *satisfy* at least one of its operators' precondition (true positives):
  {'box_lid:lid': {'is_open': 1.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -4.4, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.9, 'color': 0.0, 'grasp': 1.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.8},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.2},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -4.4, 'fingers': 0.0}}

Ground option Dry(robby:robot) was applied on 5 states and *failed* to executed on 4/5 states (ground truth negative states).
  Out of the 4 GT negative states, with the current predicates and operators, 4/4 states *satisfy* at least one of its operators' precondition (false positives):
  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -4.0, 'pose_z': 0.3, 'dirtiness': 0.6, 'wetness': 0.0, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.3},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 1.0},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -4.8, 'fingers': 1.0}}

  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -5.2, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.0, 'color': 0.0, 'grasp': 1.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.4},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.8},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -5.2, 'fingers': 0.0}}

  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -3.0, 'pose_z': 0.3, 'dirtiness': 1.0, 'wetness': 0.0, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.4},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.9},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -6.6, 'fingers': 1.0}}

Ground option Wash(robby:robot) was applied on 4 states and *successfully* executed on 1/4 states (ground truth positive states).
  Out of the 1 GT positive states, with the current predicates and operators, 1/1 states *satisfy* at least one of its operators' precondition (true positives):
  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -1.3, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.8, 'color': 0.0, 'grasp': 1.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.7},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.4},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -1.3, 'fingers': 0.0}}

Ground option Wash(robby:robot) was applied on 4 states and *failed* to executed on 3/4 states (ground truth negative states).
  Out of the 3 GT negative states, with the current predicates and operators, 3/3 states *satisfy* at least one of its operators' precondition (false positives):
  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -8.5, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.0, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.8},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.2},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -3.1, 'fingers': 1.0}}

  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -3.7, 'pose_z': 0.3, 'dirtiness': 0.7, 'wetness': 0.0, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.9},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.3},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -8.0, 'fingers': 1.0}}

  {'box_lid:lid': {'is_open': 1.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -1.5, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.0, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.2},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.9},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -3.1, 'fingers': 1.0}}

Ground option Paint(robby:robot) was applied on 72 states and *successfully* executed on 4/72 states (ground truth positive states).
  Out of the 4 GT positive states, with the current predicates and operators, 4/4 states *satisfy* at least one of its operators' precondition (true positives):
  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -5.2, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.0, 'color': 0.0, 'grasp': 1.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.4},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.8},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -5.2, 'fingers': 0.0}}

  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -3.3, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.0, 'color': 0.0, 'grasp': 0.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.3},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.9},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -6.8, 'fingers': 0.0}}

  {'box_lid:lid': {'is_open': 1.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -4.4, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.0, 'color': 0.0, 'grasp': 1.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.8},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.2},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -4.4, 'fingers': 0.0}}

Ground option Paint(robby:robot) was applied on 72 states and *failed* to executed on 68/72 states (ground truth negative states).
  Out of the 68 GT negative states, with the current predicates and operators, 68/68 states *satisfy* at least one of its operators' precondition (false positives), to list 3:
  {'box_lid:lid': {'is_open': 1.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': 0.6, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.9, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.8},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.2},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -4.4, 'fingers': 1.0}}

  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -1.5, 'pose_z': 0.3, 'dirtiness': 0.9, 'wetness': 0.0, 'color': 0.0, 'grasp': 1.0, 'held': 1.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.3},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 1.0},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -1.5, 'fingers': 0.0}}

  {'box_lid:lid': {'is_open': 0.0},
   'obj0:obj': {'pose_x': 1.6, 'pose_y': -5.2, 'pose_z': 0.3, 'dirtiness': 0.0, 'wetness': 0.0, 'color': 0.0, 'grasp': 0.5, 'held': 0.0},
   'receptacle_box:box': {'pose_x': 1.6, 'pose_y': 0.5, 'color': 0.4},
   'receptacle_shelf:shelf': {'pose_x': 1.6, 'pose_y': 2.0, 'color': 0.8},
   'robby:robot': {'pose_x': 1.1, 'pose_y': -5.2, 'fingers': 1.0}}


Your objective is to invent all necessary predicates for this domain, so they can be added to the action operators' preconditions or effects to facilitate effective and efficient planning. Define predicates in python blocks as follows:
```python
def classifier(state: State, objects: Sequence[Object]) -> bool:
    # Implement the boolean classifier function here
    
name: str = # Define the predicate name here
types: Sequence[Type] = # Write a list of object types variables exist in the environment here
predicate_name = Predicate(name, types, classifier)
```
More specifically, this means when the invented predicates are added to the preconditions, the states where the ground option fail to execute (GT negative states) should not satisfy any of its ground operators' precondition, while the states where the ground option successfully executed (GT positive states) should satisfy at least one of its operators' precondition.
That is, in future planning, the operators with the invented predicates should help to maximize the number of true positive states while minimizing the number of false positive states.

Ensure that:
- Take the predefined predicate definition for reference;
- Only object-type variables defined in the environment are used for `types`.
- Predicates are distinct and do not introduce new constants.
- When needed, use only predefined methods from the State class such as `get` and `get_objects`;
- The object feature names used in classifier definitions are present in the states and object type instantiations;
- Type declarations in the provided template are strictly followed.