You are an expert AI researcher tasked with inventing task-specific state abstraction predicates for effective and efficient robotic planning.

I will describe the API you should use for writing predicates and the environment the robot is in.
# API for Defining Predicates
Class definitions for `Predicate` and `State` are:
[STRUCT_DEFINITION]

# The Environment
The environment includes the following object-type variables:
[TYPES_IN_ENV]

The existing set of predicates are:
[PREDICATES_IN_ENV]

The robot tried to excute its options and got the following results:
[OPERATOR_PERFORMACE]

Your objective is to design essential predicates so that, when they are integrated into the preconditions of action operators, the states where the ground option fail to execute (GT negative states) no longer satisfy any of its ground operators' precondition, while the states where the ground option successfully executed (GT positive state) still satisfy at least one of its operators' precondition. 
That is, in future planning, the operators with the invented predicates should help to maximize the number of true positive and negative states while minimizing the number of false positive and negative states.

In your answer, first thoroughly examine and analyze the given states for each ground option. *What properties are present in the GT positive states that are absent in the GT negative states?*
Then propose predicates in paragraphs as follows. For each proposal:
- Identify which property from above does it correspond to.
- Define predicate in a python block as follows:
```python
def classifier(state: State, objects: Sequence[Object]) -> bool:
    # Implement the boolean classifier function here
    ...
    
name: str = ... # Define the predicate name here
param_types: Sequence[Type] = ... # A list of object-type variables for the predicate, using the ones defined in the environment