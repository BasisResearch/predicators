Context: You are an expert AI researcher tasked with inventing task-specific state abstraction predicates for effective and efficient robotic planning.

I will describe the API you should use for writing predicates and the environment the robot is in.
# The API for `NSPredicate` and `State` is:
[STRUCT_DEFINITION]

The environment includes the following object-type variables with features:
[TYPES_IN_ENV]

The existing predicates are:
[PREDICATES_IN_ENV]

[LISTED_STATES]

Please implement the following predicates which would have evaluation values that matches the following specification:
[PREDICATE_SPECS]

Implement each predicate in a Python block as follows:
```python
def _<predicate_name>_NSP_holds(state: State, objects: Sequence[Object]) -> bool:
    # Implement the boolean classifier function here
    ..init_cnpt_s2.

# Define the predicate name here 
name: str = ... 

# A list of object-type variables for the predicate, using the ones defined in the environment
param_types: Sequence[Type] = ... 
<predicate_name> = NSPredicate(name, param_types, _<predicate_name>_NSP_holds)
```

- When writing the proposals, strictly adhere to the following guidlines:
    - Use only object-type variables defined in the environment when defining  `param_types`.
    - Don't use any undefined constants;
    - Don't use object features that are not present in the definition of that object type.
    - Adhere to the type hints in the predicate definition template.
    - Make use of helper functions such as the classifier function of the existing predicates in the form of `_<predicate_name>_NSP_holds`, if they're helpful.
    - Your don't need to import anything.
    - Ensure the classifiers can produce the intended results given any number of objects in a state.