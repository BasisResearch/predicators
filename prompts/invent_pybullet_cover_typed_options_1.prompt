You are an expert AI researcher tasked with inventing task-specific state abstraction predicates for effective and efficient robotic planning.

I will describe the API you should use for writing predicates and the environment the robot is in.
# The API for `NSPredicate` and `State` is:
```python
class RawState:
    """A class representing the raw visual state of the world.

    Attributes:
    -----------
    labeled_image : Image
        An observation of the state annotated with a unique label for each object.

    Methods:
    --------
    crop_to_objects(self, objects: Sequence[Object],
                    left_margin: int = 30, lower_margin: int = 30,
                    right_margin: int = 30, top_margin: int = 30) -> Image:
        Crops the labeled image to only focus on the objects in the input.
    get(self, obj: Object, feature_name: str) -> Any:
        Looks up an object feature by name and returns the feature value.
    get_objects(self, object_type: Type) -> List[Object]:
        Returns objects of the given type.
    evaluate_simple_assertion(assertion: str, image: Image) -> bool:
        Evaluate a simple assertion about an image..
    """
    def crop_to_objects(self, objects: Sequence[Object],
                        left_margin: int = 30, lower_margin: int = 30, 
                        right_margin: int = 30, top_margin: int = 30) -> Image:
        """Crop the labeled_image to only include the specified objects, with
        optional margins around the objects.

        Parameters:
        -----------
        objects : Collection[Object]
            The objects to include in the cropped image.
        left_margin, lower_margin, right_margin, top_margin : int, optional
            The left, lower, right, and top margin to include in the cropped 
            image (default is 5, 10, 10 and 5).

        Returns:
        --------
        Image
            The cropped image.
        Examples:
        ---------
        >>> # An example for predicate SwitchOn
        >>> def _SwitchOn_NSP_holds(state: RawState, objects: Sequence[Object])\
        >>>     -> bool:
        >>>     '''
        >>>     Determine if the light switch is in the on state.
        >>>     '''
        >>>     switch, = objects
        >>>     switch_name = switch.id_name
        >>>     ...
        >>>     # Crop the scene image to focus.
        >>>     attention_image = state.crop_to_objects([switch], left_margin=20, 
        >>>                         right_margin=20)
        >>>     return state.evaluate_simple_assertion(
        >>>         f"{switch_name} is in the on state.", attention_image)
        >>>
        >>> # An example for predicate OnTable
        >>> def _OnTable_NSP_holds(state: RawState, objects:Sequence[Object]) ->\
        >>>         bool:
        >>>     '''Determine if the object is directly resting on the table's 
        >>>     surface.
        >>>     '''
        >>>     phone, = objects
        >>>     phone_name = phone.id_name
        >>>     
        >>>     # Crop the scene image to the smallest bounding box that include both objects.
        >>>     # We know there is only one table in this environment.
        >>>     table = state.get_objects(_table_type)[0]
        >>>     table_name = table.id_name
        >>>     attention_image = state.crop_to_objects([phone, table])

        >>>     return state.evaluate_simple_assertion(
        >>>         f"{phone_name} is directly resting on {table_name}'s surface.",
        >>>         attention_image)
        """

    def get(self, obj: Object, feature_name: str) -> Any:
        """Look up an object feature by name.

        Parameters:
        -----------
        obj : Object
            The object whose feature value is to be retrieved.
        feature_name : str
            The name of the feature to be retrieved.

        Returns:
        --------
        Any
            The value of the specified feature for the given object.
        
        Example:
        ---------
        >>> # An example for predicate GripperOpen
        >>> _robot_type = Type("robot", ["x", "y", "tilt", "wrist", "gripper"])
        >>> def _GripperOpen_holds(state: State, objects: Sequence[Object]
        >>>                     ) -> bool:
        >>>     robot, = objects
        >>>     return state.get(robot, "gripper") > 0.5
        >>> _GripperOpen = NSPredicate("GripperOpen", [_robot_type], 
        >>>                             _GripperOpen_holds)
        >>>
        >>> # An example for predicate Covers
        >>> def _Covers_NSP_holds(state: State, objects: Sequence[Object]
        >>>                         ) -> bool:
        >>>     '''
        >>>     Determine if the block is covering (directly on top of) the target 
        >>>     region.
        >>>     '''
        >>>     block, target = objects
        >>>
        >>>     # Necessary but not sufficient condition for covering: no part of the 
        >>>     # target region is outside the block.
        >>>     if state.get(target, "bbox_left") < state.get(block, "bbox_left") or\
        >>>        state.get(target, "bbox_right") > state.get(block, "bbox_right"):
        >>>         return False
        >>>     block_id, target_id = block.id_name, target.id_name
        >>>     attention_image = state.crop_to_objects([block, target])
        >>>     return state.evaluate_simple_assertion(
        >>>         f"{block_id} is on top of and covering {target_id}.", 
        >>>         attention_image)
        >>> _Covers = NSPredicate("Covers", [_block_type, _target_type],
        >>>                       _Covers_holds)
        """

    def get_objects(self, object_type: Type) -> List[Object]:
        """Return all objects of the given type in the state.

        Parameters:
        -----------
        object_type : Type
            The type of the objects to be retrieved.

        Returns:
        --------
        List[Object]
            A list of objects of the specified type, in the order they are 
            iterated over in the state.

        Examples:
        ---------
        >>> def _AppleInBowl_holds(state: State, objects: Sequence[Object]) -> bool:
        >>>     apple, bowl = objects
        >>>     ...
        >>>
        >>> def _BowlEmpty_holds(state: State,
        >>>                            objects: Sequence[Object]) -> bool:
        >>>     bowl, = objects
        >>>     for apple in state.get_objects(_apple_type):
        >>>         if _AppleInBowl_holds(state, [bowl]):
        >>>             return False
        >>>     return True
        >>> _BowlEmpty = NSPredicate("BowlEmpty", [], 
        >>>                              _BowlEmpty_holds)
        """

    def evaluate_simple_assertion(self, assertion: str, image: Image) -> bool:
        """A function that takes a simple assertion as a string and an image as
        input, and returns a boolean indicating whether the assertion holds
        true for the image according to the VLM.

        The assertion should be clear, unambiguous, and relatively simple, and 
        the image should have been cropped to only the relavant objects.

        Parameters:
        -----------
        assertion : str
            The assertion to be evaluated. This should be a clear, unambiguous, and 
            relatively simple statement about the image.

        image : Image
            The image for which the assertion is to be evaluated.

        Returns:
        --------
        bool
            True if the VLM determines that the assertion holds true for the image, 
            False otherwise.
        
        Examples:
        ---------
        >>> # An example for predicate Open
        >>> ...
        >>> return state.evaluate_simple_assertion(f"{door_name} is open", 
        >>>                                         attention_image)

        >>> # An example for predicate CupOnShelf
        >>> ...
        >>> return state.evaluate_simple_assertion(
        >>>             f"{cup_name} is resting on {shelf_name}", 
        >>>             attention_image)

        >>> # An example for predicate CupHasTeaBag
        >>> ...
        >>> return state.evaluate_simple_assertion(
        >>>             f"{cup_name} has a tea bag in it", attention_image)

        >>> # An example for predicate PluggedIn
        >>> ...
        >>> return state.evaluate_simple_assertion(
        >>>             f"{coffee_machine_name} is plugged into a socket", 
        >>>             attention_image)

        >>> # An example for predicate Cooked
        >>> ...
        >>> return state.evaluate_simple_assertion(
        >>>             f"{patty_name} is not raw and cooked", 
        >>>             attention_image)
        """

class NSPredicate:
    """A class representing a predicate, a classifier that characterizes
    properties of states in the context of AI task planning. A predicate is a
    function that takes a state and a sequence of objects as input, and returns
    a boolean value indicating whether a certain property holds for those
    objects in that state.

    Parameters:
    -----------
    name : str
        The name of the predicate.

    types : Sequence[Type]
        The types of the objects that the predicate applies to. This sequence
        length should match the number of objects passed to the classifier. Each
        type corresponds one-to-one with an object in the sequence.

    _classifier : Callable[[State, Sequence[Object]], bool]
        The classifier function for the predicate. It takes a state and a
        sequence of objects as input, and returns a boolean value. The
        classifier returns True if the predicate holds for those objects in that
        state, and False otherwise.
    """
```

# The Environment
The environment includes the following object-type variables with features:
```python
_block_type = Type("block", ["pose_y_norm", "bbox_left", "bbox_right", "bbox_upper", "bbox_lower"])
_target_type = Type("target", ["pose_y_norm", "bbox_left", "bbox_right", "bbox_upper", "bbox_lower"])
_robot_type = Type("robot", ["pose_y_norm", "pose_x", "pose_z", "fingers", "bbox_left", "bbox_right", "bbox_upper", "bbox_lower"])
_table_type = Type("table", [])
```
where `bbox_left`, `bbox_lower`, ..., corresponds to the pixel index of the left, lower boundary of the object bounding box in the image starting from (0, 0) at the bottom left corner of the image.
`pose_x`, `pose_y`, and `pose_z` correspond to the 3d object position in the world frame, so these are not comparable to the bbox values.

The existing set of predicates are:
{'Covers(?x:block, ?y:target)'}


The set of options the robot has are:
Pick(?block:block)
Place(?block:block, ?target:target)

Utilizing the existing predicates, we carefully designed the following action operators:
Operator-Place:
    Parameters: [?block:block, ?target:target]
    Preconditions: []
    Add Effects: [Covers(?block:block, ?target:target)]
    Delete Effects: []
    Ignore Effects: []
    Option Spec: Place(?block:block, ?target:target)
Operator-Pick:
    Parameters: [?block:block]
    Preconditions: []
    Add Effects: []
    Delete Effects: []
    Ignore Effects: []
    Option Spec: Pick(?block:block)

The robot tried to execute its options in states that satisfied their operators' preconditions and got the following results:
Option Place(block3:block, target5:target) *successfully* executed on the following states (positive states):
  state_2 with additional info:
  {'block3:block',
   'block4:block',
   'robot1:robot': {'fingers': 0.0},
   'table2:table',
   'target5:target',
   'target6:target'}
  Previous option: Pick(block3:block)

Option Place(block3:block, target5:target) *failed* to executed on the following states (negative states):
  state_1 with additional info:
  {'block3:block',
   'block4:block',
   'robot1:robot': {'fingers': 1.0},
   'table2:table',
   'target5:target',
   'target6:target'}
  Previous option: None

Option Place(block4:block, target6:target) *successfully* executed on the following states (positive states):
  state_8 with additional info:
  {'block3:block',
   'block4:block',
   'robot1:robot': {'fingers': 0.0},
   'table2:table',
   'target5:target',
   'target6:target'}
  Previous option: Pick(block4:block)

Option Place(block4:block, target6:target) *failed* to executed on the following states (negative states):
  state_1 with additional info:
  {'block3:block',
   'block4:block',
   'robot1:robot': {'fingers': 1.0},
   'table2:table',
   'target5:target',
   'target6:target'}
  Previous option: None

  state_9 with additional info:
  {'block3:block',
   'block4:block',
   'robot1:robot': {'fingers': 0.0},
   'table2:table',
   'target5:target',
   'target6:target'}
  Previous option: Pick(block3:block)


Your task is to design predicates--*that are semantically different from the existing predicates*--so that when they are integrated into the preconditions of action operators, the negative states no longer satisfy the operators' precondition, while positive states still satisfy them.

Define each proposal in a Python block as follows:
```python
def <predicate_name>_holds(state: State, objects: Sequence[Object]) -> bool:
    # Implement the boolean classifier function here
    ...

# Define the predicate name here 
name: str = ... 

# A list of object-type variables for the predicate, using the ones defined in the environment
param_types: Sequence[Type] = ... 
<predicate_name> = NSPredicate(name, param_types, <predicate_name>_holds)
```

When writing the proposals, *strictly* adhere to the following guidelines:
- When defining classifier functions, try to 
    1. *first* use rules based on object features to identify scenarios where the predicate is *clearly* False (the robot can't be holding anything if its hand is open). 
    2. Then, use the `evaluate_simple_assertion` method *once* to cover the potential remaining cases. 
Take the format of existing predicates for reference.
- Each proposed predicate is semantically from the existing predicates and each other.
- Don't write out the new operators.
- Make use of helper functions such as the classifier function in the existing predicates and `evaluate_simple_assertion`, if they're helpful. But try not to use `evaluate_simple_assertion` in a loop.