For each property youâ€™ve proposed, create one or more predicates with parameters of types available in the current environment. Only write the predicates if they can be determined from the image observation and the state information

Proposed properties:
{CONCEPT_PROPOSALS}

The available types are:
{TYPES_IN_ENV}

If a predicate requires parameters that doesn't exist in the environment, convert them into more specific predicates. For example, instead of proposing HasColor(?block:block, ?color:color), use more specific predicates like IsRed(?block:block), IsWhite(?block:block), .., as the environment does not include a `color` type.

Instructions for Response:
Propose predicates in the following format:
    ```plaintext
    # Predicate Proposals
    * <predicate1_name>(?<var1>:<type1>, ?<var2>:<type2>, ...): <The assertion this predicate is making>.
    * ...
    
    * <predicate2_name>(?<var1>:<type1>, ?<var2>:<type2>, ...): <The assertion this predicate is making>.
    * <predicate3_name>(?<var1>:<type1>, ?<var2>:<type2>, ...): <The assertion this predicate is making>.
    # ...

    * ...
    ```
* The assertion should be very clear, precise, and unambiguous, and about the relationship or properties of the variables `?<var1>`, `?<var2>`, etc., if applicable.
* Replace placeholders like <predicate1_name>, <var1>, etc., with actual names; <type1> actual types from the state dictionary provided. Do not use types that are not present in the states (e.g., int, float, string, etc).
* Group predicates into chunks, separated by an empty line, corresponding to the proposed properties.