Running command: python predicators/main.py --env doorknobs --approach oracle --experiment_id RLBRIDGE_doorknobs-oracle --debug --max_initial_demos 0 --sampler_learner oracle --strips_learner oracle --num_online_learning_cycles 100 --num_test_tasks 10 --num_train_tasks 1 --interactive_num_requests_per_cycle 1 --online_nsrt_learning_requests_per_cycle 1 --max_num_steps_interaction_request 1 --timeout 1000 --active_sampler_learning_num_samples 10 --same_levels True --explorer maple_q --bilevel_plan_without_sim True --mlp_regressor_max_itr 100000 --segmenter oracle --demonstrator oracle --sesame_max_skeletons_optimized 50 --use_obj_centric True --seed 2
Full config:
namespace(num_train_tasks=1, num_test_tasks=10, num_online_learning_cycles=100, online_learning_max_transitions=inf, max_initial_demos=0, allow_interaction_in_demo_tasks=True, max_num_steps_interaction_request=1, pretty_print_when_loading=False, test_env_seed_offset=10000, test_task_json_dir=None, segmenter='oracle', demonstrator='oracle', render_state_dpi=150, approach_wrapper=None, allow_exclude_goal_predicates=False, allow_state_allclose_comparison_despite_simulator_state=False, cover_multistep_action_limits=[-inf, inf], cover_multistep_degenerate_oracle_samplers=False, cover_multistep_max_tb_placements=100, cover_multistep_max_hr_placements=100, cover_multistep_thr_percent=0.4, cover_multistep_bhr_percent=0.4, cover_multistep_bimodal_goal=False, cover_multistep_goal_conditioned_sampling=False, bumpy_cover_num_bumps=2, bumpy_cover_spaces_per_bump=1, bumpy_cover_right_targets=False, bumpy_cover_bumpy_region_start=0.8, bumpy_cover_init_bumpy_prob=0.25, regional_bumpy_cover_include_impossible_nsrt=False, blocks_num_blocks_train=[3, 4], blocks_num_blocks_test=[5, 6], blocks_holding_goals=False, blocks_block_size=0.045, playroom_num_blocks_train=[3], playroom_num_blocks_test=[3], cluttered_table_num_cans_train=5, cluttered_table_num_cans_test=10, cluttered_table_can_radius=0.01, cluttered_table_collision_angle_thresh=0.7853981633974483, cluttered_table_place_goal_conditioned_sampling=True, repeated_nextto_num_dots=15, repeated_nextto_nextto_thresh=0.5, painting_initial_holding_prob=0.5, painting_lid_open_prob=0.3, painting_num_objs_train=[2, 3], painting_num_objs_test=[3, 4], painting_max_objs_in_goal=inf, painting_goal_receptacles='box_and_shelf', painting_raise_environment_failure=True, rnt_painting_num_objs_train=[8, 9, 10], rnt_painting_num_objs_test=[11, 12, 13], rnt_painting_max_objs_in_goal=2, tools_num_items_train=[2], tools_num_items_test=[2, 3], tools_num_contraptions_train=[2], tools_num_contraptions_test=[3], sandwich_ingredients_train={'bread': [2], 'patty': [1], 'ham': [1], 'egg': [1], 'cheese': [1], 'lettuce': [1], 'tomato': [1], 'green_pepper': [1]}, sandwich_ingredients_test={'bread': [2], 'patty': [1], 'ham': [1], 'egg': [1], 'cheese': [1], 'lettuce': [1], 'tomato': [1], 'green_pepper': [1]}, pybullet_draw_debug=False, pybullet_camera_width=335, pybullet_camera_height=180, pybullet_sim_steps_per_action=20, pybullet_max_ik_iters=100, pybullet_ik_tol=0.001, pybullet_robot='fetch', pybullet_birrt_num_attempts=10, pybullet_birrt_num_iters=100, pybullet_birrt_smooth_amt=50, pybullet_birrt_extend_num_interp=10, pybullet_control_mode='position', pybullet_max_vel_norm=0.05, pybullet_robot_ee_orns=defaultdict(<function GlobalSettings.<lambda> at 0x7f07f7d5a5e0>, {'pybullet_blocks': {'fetch': (0.7071, 0.0, -0.7071, 0.0), 'panda': (0.7071, 0.7071, 0.0, 0.0)}}), ikfast_max_time=0.05, ikfast_max_candidates=100, ikfast_max_attempts=inf, ikfast_max_distance=inf, ikfast_norm=inf, pddl_blocks_procedural_train_min_num_blocks=3, pddl_blocks_procedural_train_max_num_blocks=4, pddl_blocks_procedural_train_min_num_blocks_goal=2, pddl_blocks_procedural_train_max_num_blocks_goal=3, pddl_blocks_procedural_test_min_num_blocks=5, pddl_blocks_procedural_test_max_num_blocks=6, pddl_blocks_procedural_test_min_num_blocks_goal=2, pddl_blocks_procedural_test_max_num_blocks_goal=5, pddl_blocks_procedural_new_pile_prob=0.5, pddl_blocks_fixed_train_indices=[1, 2, 3, 4, 5], pddl_blocks_fixed_test_indices=[6, 7, 8, 9, 10], pddl_delivery_procedural_train_min_num_locs=5, pddl_delivery_procedural_train_max_num_locs=10, pddl_delivery_procedural_train_min_want_locs=2, pddl_delivery_procedural_train_max_want_locs=4, pddl_delivery_procedural_train_min_extra_newspapers=0, pddl_delivery_procedural_train_max_extra_newspapers=1, pddl_delivery_procedural_test_min_num_locs=31, pddl_delivery_procedural_test_max_num_locs=40, pddl_delivery_procedural_test_min_want_locs=20, pddl_delivery_procedural_test_max_want_locs=30, pddl_delivery_procedural_test_min_extra_newspapers=0, pddl_delivery_procedural_test_max_extra_newspapers=10, pddl_easy_delivery_procedural_train_min_num_locs=3, pddl_easy_delivery_procedural_train_max_num_locs=5, pddl_easy_delivery_procedural_train_min_want_locs=1, pddl_easy_delivery_procedural_train_max_want_locs=2, pddl_easy_delivery_procedural_train_min_extra_newspapers=0, pddl_easy_delivery_procedural_train_max_extra_newspapers=1, pddl_easy_delivery_procedural_test_min_num_locs=4, pddl_easy_delivery_procedural_test_max_num_locs=6, pddl_easy_delivery_procedural_test_min_want_locs=2, pddl_easy_delivery_procedural_test_max_want_locs=3, pddl_easy_delivery_procedural_test_min_extra_newspapers=0, pddl_easy_delivery_procedural_test_max_extra_newspapers=1, pddl_spanner_procedural_train_min_nuts=1, pddl_spanner_procedural_train_max_nuts=3, pddl_spanner_procedural_train_min_extra_spanners=0, pddl_spanner_procedural_train_max_extra_spanners=2, pddl_spanner_procedural_train_min_locs=2, pddl_spanner_procedural_train_max_locs=4, pddl_spanner_procedural_test_min_nuts=10, pddl_spanner_procedural_test_max_nuts=20, pddl_spanner_procedural_test_min_extra_spanners=0, pddl_spanner_procedural_test_max_extra_spanners=10, pddl_spanner_procedural_test_min_locs=20, pddl_spanner_procedural_test_max_locs=30, pddl_forest_procedural_train_min_size=8, pddl_forest_procedural_train_max_size=10, pddl_forest_procedural_test_min_size=10, pddl_forest_procedural_test_max_size=12, pddl_gripper_procedural_train_min_num_rooms=3, pddl_gripper_procedural_train_max_num_rooms=5, pddl_gripper_procedural_train_min_num_balls=1, pddl_gripper_procedural_train_max_num_balls=2, pddl_gripper_procedural_test_min_num_rooms=3, pddl_gripper_procedural_test_max_num_rooms=5, pddl_gripper_procedural_test_min_num_balls=1, pddl_gripper_procedural_test_max_num_balls=2, pddl_ferry_procedural_train_min_num_locs=3, pddl_ferry_procedural_train_max_num_locs=5, pddl_ferry_procedural_train_min_num_cars=1, pddl_ferry_procedural_train_max_num_cars=2, pddl_ferry_procedural_test_min_num_locs=3, pddl_ferry_procedural_test_max_num_locs=5, pddl_ferry_procedural_test_min_num_cars=1, pddl_ferry_procedural_test_max_num_cars=2, pddl_miconic_procedural_train_min_buildings=1, pddl_miconic_procedural_train_max_buildings=2, pddl_miconic_procedural_train_min_floors=3, pddl_miconic_procedural_train_max_floors=5, pddl_miconic_procedural_train_min_passengers=1, pddl_miconic_procedural_train_max_passengers=2, pddl_miconic_procedural_test_min_buildings=1, pddl_miconic_procedural_test_max_buildings=2, pddl_miconic_procedural_test_min_floors=3, pddl_miconic_procedural_test_max_floors=5, pddl_miconic_procedural_test_min_passengers=1, pddl_miconic_procedural_test_max_passengers=2, stick_button_num_buttons_train=[1, 2], stick_button_num_buttons_test=[3, 4], stick_button_disable_angles=True, stick_button_holder_scale=0.1, screws_num_screws_train=[15, 20], screws_num_screws_test=[25, 30], doors_room_map_size=2, test_doors_room_map_size=5, doors_min_obstacles_per_room=0, doors_max_obstacles_per_room=3, doors_min_room_exists_frac=0.25, doors_max_room_exists_frac=0.75, doors_birrt_num_attempts=10, doors_birrt_num_iters=100, doors_birrt_smooth_amt=50, doors_draw_debug=False, timeout=1000.0, doorknobs_target_value=0.75, narrow_passage_open_door_refine_penalty=0, narrow_passage_door_width_padding_lb=0.0001, narrow_passage_door_width_padding_ub=0.015, narrow_passage_passage_width_padding_lb=0.0005, narrow_passage_passage_width_padding_ub=0.02, narrow_passage_birrt_num_attempts=10, narrow_passage_birrt_num_iters=100, narrow_passage_birrt_smooth_amt=50, exit_garage_clear_refine_penalty=0, exit_garage_min_num_obstacles=2, exit_garage_max_num_obstacles=3, exit_garage_rrt_extend_fn_threshold=0.001, exit_garage_rrt_num_control_samples=100, exit_garage_rrt_num_attempts=3, exit_garage_rrt_num_iters=100, exit_garage_rrt_sample_goal_eps=0.1, exit_garage_motion_planning_ignore_obstacles=False, exit_garage_raise_environment_failure=False, coffee_num_cups_train=[1], coffee_num_cups_test=[4], coffee_jug_init_rot_amt=2.0943951023931953, satellites_num_sat_train=[2, 3], satellites_num_obj_train=[3, 4], satellites_num_sat_test=[3, 4], satellites_num_obj_test=[4, 5], sokoban_gym_name='Sokoban-v0', kitchen_use_perfect_samplers=False, kitchen_goals='all', kitchen_render_set_of_marks=False, kitchen_use_combo_move_nsrts=False, kitchen_randomize_init_state=False, sticky_table_num_tables=5, sticky_table_place_smooth_fall_prob=0.6, sticky_table_place_sticky_fall_prob=0.0, sticky_table_pick_success_prob=1.0, sticky_table_tricky_floor_place_sticky_fall_prob=0.5, sticky_table_place_ball_fall_prob=1.0, sticky_table_num_sticky_tables=1, grid_row_num_cells=5, test_grid_row_num_cells=10, num_doors=2, gridworld_num_rows=4, gridworld_num_cols=4, random_options_max_tries=100, option_model_terminate_on_repeat=True, option_model_use_gui=False, gnn_num_message_passing=3, gnn_layer_size=16, gnn_learning_rate=0.001, gnn_weight_decay=0, gnn_num_epochs=25000, gnn_batch_size=128, gnn_do_normalization=False, gnn_use_validation_set=True, gnn_option_policy_solve_with_shooting=True, gnn_option_policy_shooting_variance=0.1, gnn_option_policy_shooting_max_samples=100, metacontroller_max_samples=100, pg3_heuristic='policy_guided', pg3_search_method='hill_climbing', pg3_task_planning_heuristic='lmcut', pg3_gbfs_max_expansions=100, pg3_hc_enforced_depth=0, pg3_max_policy_guided_rollout=50, pg3_plan_compare_inapplicable_cost=0.99, pg3_add_condition_allow_new_vars=True, pg3_max_analogies=5, pg3_init_policy=None, pg3_init_base_env=None, nsrt_rl_reward_epsilon=0.01, nsrt_rl_pos_reward=0, nsrt_rl_neg_reward=-1, nsrt_rl_option_learner='dummy_rl', nsrt_rl_valid_reward_steps_threshold=10, pretrained_model_prompt_cache_dir='pretrained_model_cache', llm_openai_max_response_tokens=700, llm_use_cache_only=False, llm_model_name='text-curie-001', llm_temperature=0.5, llm_num_completions=1, vlm_model_name='gemini-pro-vision', sesame_task_planner='astar', sesame_task_planning_heuristic='lmcut', sesame_allow_noops=True, sesame_check_expected_atoms=True, sesame_use_necessary_atoms=True, sesame_use_visited_state_set=False, sesame_grounder='naive', sesame_check_static_object_changes=False, sesame_static_object_change_tol=0.001, bilevel_plan_without_sim=True, log_dir='logs', results_dir='results', eval_trajectories_dir='eval_trajectories', approach_dir='saved_approaches', data_dir='saved_datasets', video_dir='videos', image_dir='images', video_fps=2, failure_video_mode='longest_only', offline_data_planning_timeout=-1, offline_data_task_planning_heuristic='default', offline_data_max_skeletons_optimized=-1, offline_data_num_replays=500, offline_data_bilevel_plan_without_sim=None, teacher_dataset_num_examples=1, min_data_for_nsrt=0, min_perc_data_for_nsrt=0, data_orderings_to_search=1, strips_learner='oracle', disable_harmlessness_check=False, enable_harmless_op_pruning=False, backchaining_check_intermediate_harmlessness=False, pnad_search_without_del=False, pnad_search_timeout=10.0, compute_sidelining_objective_value=False, clustering_learner_true_pos_weight=10, clustering_learner_false_pos_weight=1, cluster_and_intersect_prederror_max_groundings=10, cluster_and_search_inner_search_max_expansions=2500, cluster_and_search_inner_search_timeout=30, cluster_and_search_score_func_max_groundings=10000, cluster_and_search_var_count_weight=0.1, cluster_and_search_precon_size_weight=0.01, cluster_and_intersect_prune_low_data_pnads=False, cluster_and_intersect_min_datastore_fraction=0.0, use_torch_gpu=False, learning_rate=0.001, weight_decay=0, mlp_regressor_max_itr=100000, mlp_regressor_hid_sizes=[32, 32], mlp_regressor_clip_gradients=True, mlp_regressor_gradient_clip_value=5, mlp_classifier_hid_sizes=[32, 32], mlp_classifier_balance_data=True, cnn_regressor_max_itr=500, cnn_regressor_conv_channel_nums=[3, 3], cnn_regressor_conv_kernel_sizes=[5, 3], cnn_regressor_linear_hid_sizes=[32, 8], cnn_regressor_clip_gradients=True, cnn_regressor_gradient_clip_value=5, neural_gaus_regressor_hid_sizes=[32, 32], neural_gaus_regressor_max_itr=1000, mlp_classifier_n_iter_no_change=5000, implicit_mlp_regressor_max_itr=10000, implicit_mlp_regressor_num_negative_data_per_input=5, implicit_mlp_regressor_num_samples_per_inference=100, implicit_mlp_regressor_temperature=1.0, implicit_mlp_regressor_inference_method='derivative_free', implicit_mlp_regressor_derivative_free_num_iters=3, implicit_mlp_regressor_derivative_free_sigma_init=0.33, implicit_mlp_regressor_derivative_free_shrink_scale=0.5, implicit_mlp_regressor_grid_num_ticks_per_dim=100, pytorch_train_print_every=1000, sampler_learner='oracle', max_rejection_sampling_tries=100, sampler_mlp_classifier_max_itr=10000, sampler_mlp_classifier_n_reinitialize_tries=1, sampler_learning_use_goals=False, sampler_disable_classifier=False, sampler_learning_regressor_model='neural_gaussian', sampler_learning_max_negative_data=100000, option_learning_action_converter='identity', interactive_num_ensemble_members=10, interactive_query_policy='threshold', interactive_score_function='entropy', interactive_score_threshold=0.05, interactive_random_query_prob=0.5, interactive_num_requests_per_cycle=1, predicate_classifier_model='mlp', predicate_mlp_classifier_max_itr=100000, predicate_mlp_classifier_n_reinitialize_tries=1, predicate_mlp_classifier_init='default', predicate_knn_classifier_n_neighbors=1, online_nsrt_learning_requests_per_cycle=1, online_learning_max_novelty_count=0, active_sampler_learning_model='myopic_classifier_mlp', active_sampler_learning_feature_selection='all', active_sampler_learning_knn_neighbors=3, active_sampler_learning_use_teacher=True, active_sampler_learning_score_gamma=0.5, active_sampler_learning_fitted_q_iters=5, active_sampler_learning_explore_pursue_goal_interval=5, active_sampler_learning_object_specific_samplers=False, active_sampler_learning_n_iter_no_change=5000, active_sampler_learning_num_lookahead_samples=5, active_sampler_learning_explore_length_base=2, active_sampler_learning_num_ensemble_members=10, active_sampler_learning_exploration_sample_strategy='epsilon_greedy', active_sampler_learning_exploration_epsilon=1.0, active_sampler_learning_replay_buffer_size=1000000, active_sampler_learning_batch_size=64, use_epsilon_annealing=True, min_epsilon=0.05, polyak_tau=0.0025, same_levels=True, polyak_true=True, use_old_exploration=False, use_callplanner=True, random_bridge=False, use_obj_centric=True, rl_rwd_shape=False, skill_competence_model='optimistic', skill_competence_model_num_em_iters=3, skill_competence_model_max_train_iters=1000, skill_competence_model_learning_rate=0.01, skill_competence_model_lookahead=1, skill_competence_model_optimistic_window_size=5, skill_competence_model_optimistic_recency_size=5, skill_competence_default_alpha_beta=(10.0, 1.0), skill_competence_initial_prediction_bonus=0.5, refinement_estimator='oracle', refinement_estimation_num_skeletons_generated=8, refinement_data_num_skeletons=8, refinement_data_skeleton_generator_timeout=20, refinement_data_low_level_search_timeout=5, refinement_data_failed_refinement_penalty=5, refinement_data_include_execution_cost=True, refinement_data_low_level_execution_cost=0.05, cnn_refinement_estimator_crop=False, cnn_refinement_estimator_crop_bounds=(320, 400, 100, 650), cnn_refinement_estimator_downsample=2, bridge_policy='learned_ldl', glib_min_goal_size=1, glib_max_goal_size=1, glib_num_babbles=10, greedy_lookahead_max_num_trajectories=100, greedy_lookahead_max_traj_length=2, greedy_lookahead_max_num_resamples=10, active_sampler_explore_use_ucb_bonus=True, active_sampler_explore_bonus=0.1, active_sampler_explore_task_strategy='planning_progress', active_sampler_explorer_replan_frequency=100, active_sampler_explorer_planning_progress_max_tasks=10, active_sampler_explorer_planning_progress_max_replan_tasks=5, active_sampler_explorer_skip_perfect=True, active_sampler_learning_init_cycles_to_pursue_goal=1, grammar_search_grammar_includes_givens=True, grammar_search_grammar_includes_foralls=True, grammar_search_grammar_use_diff_features=False, grammar_search_grammar_use_euclidean_dist=False, grammar_search_use_handcoded_debug_grammar=False, grammar_search_pred_selection_approach='score_optimization', grammar_search_pred_clusterer='oracle', grammar_search_true_pos_weight=10, grammar_search_false_pos_weight=1, grammar_search_bf_weight=1, grammar_search_operator_complexity_weight=0.0, grammar_search_pred_complexity_weight=0.0001, grammar_search_max_predicates=200, grammar_search_predicate_cost_upper_bound=6, grammar_search_prune_redundant_preds=True, grammar_search_score_function='expected_nodes_created', grammar_search_heuristic_based_weight=10.0, grammar_search_max_demos=inf, grammar_search_max_nondemos=50, grammar_search_energy_based_temperature=10.0, grammar_search_task_planning_timeout=1.0, grammar_search_search_algorithm='hill_climbing', grammar_search_hill_climbing_depth=0, grammar_search_parallelize_hill_climbing=False, grammar_search_gbfs_num_evals=1000, grammar_search_off_demo_count_penalty=1.0, grammar_search_on_demo_count_penalty=10.0, grammar_search_suspicious_state_penalty=10.0, grammar_search_expected_nodes_upper_bound=100000.0, grammar_search_expected_nodes_optimal_demo_prob=0.99999, grammar_search_expected_nodes_backtracking_cost=1000.0, grammar_search_expected_nodes_allow_noops=True, grammar_search_classifier_pretty_str_names=['?x', '?y', '?z'], grammar_search_vlm_atom_proposal_prompt_type='options_labels_whole_traj', grammar_search_vlm_atom_label_prompt_type='per_scene_naive', grammar_search_vlm_atom_proposal_use_debug=False, grammar_search_clustering_gmm_num_components=10, handmade_demo_filename='', vlm_trajs_folder_name='', get_arg_specific_settings=<classmethod object at 0x7f07f7d54a90>, perceiver='trivial', horizon=200, active_sampler_learning_num_samples=10, max_num_steps_option_rollout=1000, sesame_propagate_failures='immediately', offline_data_method='demo', option_model_name='oracle', sesame_max_skeletons_optimized=50, sesame_max_samples_per_step=10, grammar_search_expected_nodes_max_skeletons=-1, grammar_search_diff_features_const_multiplier=1e-06, grammar_search_euclidean_feature_names=[('x', 'y', 'x', 'y')], grammar_search_euclidean_const_multiplier=1e-06, cover_num_blocks=2, cover_num_targets=2, cover_block_widths=[0.1, 0.07], cover_target_widths=[0.05, 0.03], cover_initial_holding_prob=0.75, env='doorknobs', approach='oracle', excluded_predicates='', included_options='', seed=2, option_learner='no_learning', explorer='maple_q', execution_monitor='trivial', make_test_videos=False, make_failure_videos=False, make_interaction_videos=False, make_demo_videos=False, make_demo_images=False, make_cogman_videos=False, load_approach=False, restart_learning=False, load_data=False, load_atoms=False, save_atoms=False, skip_until_cycle=-1, experiment_id='RLBRIDGE_doorknobs-oracle', load_experiment_id='', log_file='', use_gui=False, loglevel=10, crash_on_failure=False)
Git commit hash: 8245924b0474fdadad00f211f5e1304460f715bd
[CogMan] Reset called.
Current Task Plan:
GroundNSRT-MoveToDoorFromMainRoom:
    Parameters: (robby:robot, room3-2-1:room, room3-2-2-left-door:door)
    Preconditions: [DoorInRoom(room3-2-2-left-door:door, room3-2-1:room), InMainRoom(robby:robot, room3-2-1:room), InRoom(robby:robot, room3-2-1:room)]
    Add Effects: [InDoorway(robby:robot, room3-2-2-left-door:door)]
    Delete Effects: [InMainRoom(robby:robot, room3-2-1:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room3-2-2-left-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room3-2-1:room, room3-2-2-left-door:door, room3-2-2:room)
    Preconditions: [DoorInRoom(room3-2-2-left-door:door, room3-2-1:room), DoorInRoom(room3-2-2-left-door:door, room3-2-2:room), InDoorway(robby:robot, room3-2-2-left-door:door), InRoom(robby:robot, room3-2-1:room)]
    Add Effects: [InRoom(robby:robot, room3-2-2:room)]
    Delete Effects: [InRoom(robby:robot, room3-2-1:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room3-2-2-left-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room3-2-2-left-door:door, room3-2-2-bottom-door:door)
    Preconditions: [DoorsShareRoom(room3-2-2-left-door:door, room3-2-2-bottom-door:door), InDoorway(robby:robot, room3-2-2-left-door:door)]
    Add Effects: [InDoorway(robby:robot, room3-2-2-bottom-door:door)]
    Delete Effects: [InDoorway(robby:robot, room3-2-2-left-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room3-2-2-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room3-2-2:room, room3-2-2-bottom-door:door, room3-3-2:room)
    Preconditions: [DoorInRoom(room3-2-2-bottom-door:door, room3-2-2:room), DoorInRoom(room3-2-2-bottom-door:door, room3-3-2:room), InDoorway(robby:robot, room3-2-2-bottom-door:door), InRoom(robby:robot, room3-2-2:room)]
    Add Effects: [InRoom(robby:robot, room3-3-2:room)]
    Delete Effects: [InRoom(robby:robot, room3-2-2:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room3-2-2-bottom-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room3-2-2-bottom-door:door, room3-3-3-left-door:door)
    Preconditions: [DoorsShareRoom(room3-2-2-bottom-door:door, room3-3-3-left-door:door), InDoorway(robby:robot, room3-2-2-bottom-door:door)]
    Add Effects: [InDoorway(robby:robot, room3-3-3-left-door:door)]
    Delete Effects: [InDoorway(robby:robot, room3-2-2-bottom-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room3-3-3-left-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room3-3-2:room, room3-3-3-left-door:door, room3-3-3:room)
    Preconditions: [DoorInRoom(room3-3-3-left-door:door, room3-3-2:room), DoorInRoom(room3-3-3-left-door:door, room3-3-3:room), InDoorway(robby:robot, room3-3-3-left-door:door), InRoom(robby:robot, room3-3-2:room)]
    Add Effects: [InRoom(robby:robot, room3-3-3:room)]
    Delete Effects: [InRoom(robby:robot, room3-3-2:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room3-3-3-left-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room3-3-3-left-door:door, room3-3-3-bottom-door:door)
    Preconditions: [DoorsShareRoom(room3-3-3-left-door:door, room3-3-3-bottom-door:door), InDoorway(robby:robot, room3-3-3-left-door:door)]
    Add Effects: [InDoorway(robby:robot, room3-3-3-bottom-door:door)]
    Delete Effects: [InDoorway(robby:robot, room3-3-3-left-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room3-3-3-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room3-3-3:room, room3-3-3-bottom-door:door, room3-4-3:room)
    Preconditions: [DoorInRoom(room3-3-3-bottom-door:door, room3-3-3:room), DoorInRoom(room3-3-3-bottom-door:door, room3-4-3:room), InDoorway(robby:robot, room3-3-3-bottom-door:door), InRoom(robby:robot, room3-3-3:room)]
    Add Effects: [InRoom(robby:robot, room3-4-3:room)]
    Delete Effects: [InRoom(robby:robot, room3-3-3:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room3-3-3-bottom-door:door]
_Option(name='MoveToDoor', objects=[robby:robot, room3-2-2-left-door:door], params=array([], dtype=float32))test
_Option(name='MoveThroughDoor', objects=[robby:robot, room3-2-2-left-door:door], params=array([], dtype=float32))test
Task 1 / 10: Approach failed at policy execution time with error: Unsound option policy.
[CogMan] Reset called.
Current Task Plan:
GroundNSRT-MoveToDoorFromMainRoom:
    Parameters: (robby:robot, room4-0-4:room, room4-0-4-bottom-door:door)
    Preconditions: [DoorInRoom(room4-0-4-bottom-door:door, room4-0-4:room), InMainRoom(robby:robot, room4-0-4:room), InRoom(robby:robot, room4-0-4:room)]
    Add Effects: [InDoorway(robby:robot, room4-0-4-bottom-door:door)]
    Delete Effects: [InMainRoom(robby:robot, room4-0-4:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room4-0-4-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room4-0-4:room, room4-0-4-bottom-door:door, room4-1-4:room)
    Preconditions: [DoorInRoom(room4-0-4-bottom-door:door, room4-0-4:room), DoorInRoom(room4-0-4-bottom-door:door, room4-1-4:room), InDoorway(robby:robot, room4-0-4-bottom-door:door), InRoom(robby:robot, room4-0-4:room)]
    Add Effects: [InRoom(robby:robot, room4-1-4:room)]
    Delete Effects: [InRoom(robby:robot, room4-0-4:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room4-0-4-bottom-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room4-0-4-bottom-door:door, room4-1-4-bottom-door:door)
    Preconditions: [DoorsShareRoom(room4-0-4-bottom-door:door, room4-1-4-bottom-door:door), InDoorway(robby:robot, room4-0-4-bottom-door:door)]
    Add Effects: [InDoorway(robby:robot, room4-1-4-bottom-door:door)]
    Delete Effects: [InDoorway(robby:robot, room4-0-4-bottom-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room4-1-4-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room4-1-4:room, room4-1-4-bottom-door:door, room4-2-4:room)
    Preconditions: [DoorInRoom(room4-1-4-bottom-door:door, room4-1-4:room), DoorInRoom(room4-1-4-bottom-door:door, room4-2-4:room), InDoorway(robby:robot, room4-1-4-bottom-door:door), InRoom(robby:robot, room4-1-4:room)]
    Add Effects: [InRoom(robby:robot, room4-2-4:room)]
    Delete Effects: [InRoom(robby:robot, room4-1-4:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room4-1-4-bottom-door:door]
_Option(name='MoveToDoor', objects=[robby:robot, room4-0-4-bottom-door:door], params=array([], dtype=float32))test
_Option(name='MoveThroughDoor', objects=[robby:robot, room4-0-4-bottom-door:door], params=array([], dtype=float32))test
Task 2 / 10: Approach failed at policy execution time with error: Unsound option policy.
[CogMan] Reset called.
Current Task Plan:
GroundNSRT-MoveToDoorFromMainRoom:
    Parameters: (robby:robot, room5-2-3:room, room5-2-3-left-door:door)
    Preconditions: [DoorInRoom(room5-2-3-left-door:door, room5-2-3:room), InMainRoom(robby:robot, room5-2-3:room), InRoom(robby:robot, room5-2-3:room)]
    Add Effects: [InDoorway(robby:robot, room5-2-3-left-door:door)]
    Delete Effects: [InMainRoom(robby:robot, room5-2-3:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room5-2-3-left-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room5-2-3:room, room5-2-3-left-door:door, room5-2-2:room)
    Preconditions: [DoorInRoom(room5-2-3-left-door:door, room5-2-2:room), DoorInRoom(room5-2-3-left-door:door, room5-2-3:room), InDoorway(robby:robot, room5-2-3-left-door:door), InRoom(robby:robot, room5-2-3:room)]
    Add Effects: [InRoom(robby:robot, room5-2-2:room)]
    Delete Effects: [InRoom(robby:robot, room5-2-3:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room5-2-3-left-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room5-2-3-left-door:door, room5-2-2-bottom-door:door)
    Preconditions: [DoorsShareRoom(room5-2-3-left-door:door, room5-2-2-bottom-door:door), InDoorway(robby:robot, room5-2-3-left-door:door)]
    Add Effects: [InDoorway(robby:robot, room5-2-2-bottom-door:door)]
    Delete Effects: [InDoorway(robby:robot, room5-2-3-left-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room5-2-2-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room5-2-2:room, room5-2-2-bottom-door:door, room5-3-2:room)
    Preconditions: [DoorInRoom(room5-2-2-bottom-door:door, room5-2-2:room), DoorInRoom(room5-2-2-bottom-door:door, room5-3-2:room), InDoorway(robby:robot, room5-2-2-bottom-door:door), InRoom(robby:robot, room5-2-2:room)]
    Add Effects: [InRoom(robby:robot, room5-3-2:room)]
    Delete Effects: [InRoom(robby:robot, room5-2-2:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room5-2-2-bottom-door:door]
_Option(name='MoveToDoor', objects=[robby:robot, room5-2-3-left-door:door], params=array([], dtype=float32))test
_Option(name='MoveThroughDoor', objects=[robby:robot, room5-2-3-left-door:door], params=array([], dtype=float32))test
Task 3 / 10: Approach failed at policy execution time with error: Unsound option policy.
[CogMan] Reset called.
Current Task Plan:
GroundNSRT-MoveToDoorFromMainRoom:
    Parameters: (robby:robot, room7-4-2:room, room7-4-3-left-door:door)
    Preconditions: [DoorInRoom(room7-4-3-left-door:door, room7-4-2:room), InMainRoom(robby:robot, room7-4-2:room), InRoom(robby:robot, room7-4-2:room)]
    Add Effects: [InDoorway(robby:robot, room7-4-3-left-door:door)]
    Delete Effects: [InMainRoom(robby:robot, room7-4-2:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room7-4-3-left-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room7-4-2:room, room7-4-3-left-door:door, room7-4-3:room)
    Preconditions: [DoorInRoom(room7-4-3-left-door:door, room7-4-2:room), DoorInRoom(room7-4-3-left-door:door, room7-4-3:room), InDoorway(robby:robot, room7-4-3-left-door:door), InRoom(robby:robot, room7-4-2:room)]
    Add Effects: [InRoom(robby:robot, room7-4-3:room)]
    Delete Effects: [InRoom(robby:robot, room7-4-2:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room7-4-3-left-door:door]
_Option(name='MoveToDoor', objects=[robby:robot, room7-4-3-left-door:door], params=array([], dtype=float32))test
_Option(name='MoveThroughDoor', objects=[robby:robot, room7-4-3-left-door:door], params=array([], dtype=float32))test
[CogMan] Finishing episode.
Task 4 / 10: Policy failed to reach goal
[CogMan] Reset called.
Current Task Plan:
GroundNSRT-MoveToDoorFromMainRoom:
    Parameters: (robby:robot, room9-2-3:room, room9-2-3-left-door:door)
    Preconditions: [DoorInRoom(room9-2-3-left-door:door, room9-2-3:room), InMainRoom(robby:robot, room9-2-3:room), InRoom(robby:robot, room9-2-3:room)]
    Add Effects: [InDoorway(robby:robot, room9-2-3-left-door:door)]
    Delete Effects: [InMainRoom(robby:robot, room9-2-3:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room9-2-3-left-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room9-2-3:room, room9-2-3-left-door:door, room9-2-2:room)
    Preconditions: [DoorInRoom(room9-2-3-left-door:door, room9-2-2:room), DoorInRoom(room9-2-3-left-door:door, room9-2-3:room), InDoorway(robby:robot, room9-2-3-left-door:door), InRoom(robby:robot, room9-2-3:room)]
    Add Effects: [InRoom(robby:robot, room9-2-2:room)]
    Delete Effects: [InRoom(robby:robot, room9-2-3:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room9-2-3-left-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room9-2-3-left-door:door, room9-2-2-bottom-door:door)
    Preconditions: [DoorsShareRoom(room9-2-3-left-door:door, room9-2-2-bottom-door:door), InDoorway(robby:robot, room9-2-3-left-door:door)]
    Add Effects: [InDoorway(robby:robot, room9-2-2-bottom-door:door)]
    Delete Effects: [InDoorway(robby:robot, room9-2-3-left-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room9-2-2-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room9-2-2:room, room9-2-2-bottom-door:door, room9-3-2:room)
    Preconditions: [DoorInRoom(room9-2-2-bottom-door:door, room9-2-2:room), DoorInRoom(room9-2-2-bottom-door:door, room9-3-2:room), InDoorway(robby:robot, room9-2-2-bottom-door:door), InRoom(robby:robot, room9-2-2:room)]
    Add Effects: [InRoom(robby:robot, room9-3-2:room)]
    Delete Effects: [InRoom(robby:robot, room9-2-2:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room9-2-2-bottom-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room9-2-2-bottom-door:door, room9-3-2-bottom-door:door)
    Preconditions: [DoorsShareRoom(room9-2-2-bottom-door:door, room9-3-2-bottom-door:door), InDoorway(robby:robot, room9-2-2-bottom-door:door)]
    Add Effects: [InDoorway(robby:robot, room9-3-2-bottom-door:door)]
    Delete Effects: [InDoorway(robby:robot, room9-2-2-bottom-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room9-3-2-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room9-3-2:room, room9-3-2-bottom-door:door, room9-4-2:room)
    Preconditions: [DoorInRoom(room9-3-2-bottom-door:door, room9-3-2:room), DoorInRoom(room9-3-2-bottom-door:door, room9-4-2:room), InDoorway(robby:robot, room9-3-2-bottom-door:door), InRoom(robby:robot, room9-3-2:room)]
    Add Effects: [InRoom(robby:robot, room9-4-2:room)]
    Delete Effects: [InRoom(robby:robot, room9-3-2:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room9-3-2-bottom-door:door]
_Option(name='MoveToDoor', objects=[robby:robot, room9-2-3-left-door:door], params=array([], dtype=float32))test
_Option(name='MoveThroughDoor', objects=[robby:robot, room9-2-3-left-door:door], params=array([], dtype=float32))test
Task 5 / 10: Approach failed at policy execution time with error: Unsound option policy.
[CogMan] Reset called.
Current Task Plan:
GroundNSRT-MoveToDoorFromMainRoom:
    Parameters: (robby:robot, room14-2-1:room, room14-2-2-left-door:door)
    Preconditions: [DoorInRoom(room14-2-2-left-door:door, room14-2-1:room), InMainRoom(robby:robot, room14-2-1:room), InRoom(robby:robot, room14-2-1:room)]
    Add Effects: [InDoorway(robby:robot, room14-2-2-left-door:door)]
    Delete Effects: [InMainRoom(robby:robot, room14-2-1:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room14-2-2-left-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room14-2-1:room, room14-2-2-left-door:door, room14-2-2:room)
    Preconditions: [DoorInRoom(room14-2-2-left-door:door, room14-2-1:room), DoorInRoom(room14-2-2-left-door:door, room14-2-2:room), InDoorway(robby:robot, room14-2-2-left-door:door), InRoom(robby:robot, room14-2-1:room)]
    Add Effects: [InRoom(robby:robot, room14-2-2:room)]
    Delete Effects: [InRoom(robby:robot, room14-2-1:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room14-2-2-left-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room14-2-2-left-door:door, room14-1-2-bottom-door:door)
    Preconditions: [DoorsShareRoom(room14-2-2-left-door:door, room14-1-2-bottom-door:door), InDoorway(robby:robot, room14-2-2-left-door:door)]
    Add Effects: [InDoorway(robby:robot, room14-1-2-bottom-door:door)]
    Delete Effects: [InDoorway(robby:robot, room14-2-2-left-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room14-1-2-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room14-2-2:room, room14-1-2-bottom-door:door, room14-1-2:room)
    Preconditions: [DoorInRoom(room14-1-2-bottom-door:door, room14-1-2:room), DoorInRoom(room14-1-2-bottom-door:door, room14-2-2:room), InDoorway(robby:robot, room14-1-2-bottom-door:door), InRoom(robby:robot, room14-2-2:room)]
    Add Effects: [InRoom(robby:robot, room14-1-2:room)]
    Delete Effects: [InRoom(robby:robot, room14-2-2:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room14-1-2-bottom-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room14-1-2-bottom-door:door, room14-1-3-left-door:door)
    Preconditions: [DoorsShareRoom(room14-1-2-bottom-door:door, room14-1-3-left-door:door), InDoorway(robby:robot, room14-1-2-bottom-door:door)]
    Add Effects: [InDoorway(robby:robot, room14-1-3-left-door:door)]
    Delete Effects: [InDoorway(robby:robot, room14-1-2-bottom-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room14-1-3-left-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room14-1-2:room, room14-1-3-left-door:door, room14-1-3:room)
    Preconditions: [DoorInRoom(room14-1-3-left-door:door, room14-1-2:room), DoorInRoom(room14-1-3-left-door:door, room14-1-3:room), InDoorway(robby:robot, room14-1-3-left-door:door), InRoom(robby:robot, room14-1-2:room)]
    Add Effects: [InRoom(robby:robot, room14-1-3:room)]
    Delete Effects: [InRoom(robby:robot, room14-1-2:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room14-1-3-left-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room14-1-3-left-door:door, room14-0-3-bottom-door:door)
    Preconditions: [DoorsShareRoom(room14-1-3-left-door:door, room14-0-3-bottom-door:door), InDoorway(robby:robot, room14-1-3-left-door:door)]
    Add Effects: [InDoorway(robby:robot, room14-0-3-bottom-door:door)]
    Delete Effects: [InDoorway(robby:robot, room14-1-3-left-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room14-0-3-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room14-1-3:room, room14-0-3-bottom-door:door, room14-0-3:room)
    Preconditions: [DoorInRoom(room14-0-3-bottom-door:door, room14-0-3:room), DoorInRoom(room14-0-3-bottom-door:door, room14-1-3:room), InDoorway(robby:robot, room14-0-3-bottom-door:door), InRoom(robby:robot, room14-1-3:room)]
    Add Effects: [InRoom(robby:robot, room14-0-3:room)]
    Delete Effects: [InRoom(robby:robot, room14-1-3:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room14-0-3-bottom-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room14-0-3-bottom-door:door, room14-0-4-left-door:door)
    Preconditions: [DoorsShareRoom(room14-0-3-bottom-door:door, room14-0-4-left-door:door), InDoorway(robby:robot, room14-0-3-bottom-door:door)]
    Add Effects: [InDoorway(robby:robot, room14-0-4-left-door:door)]
    Delete Effects: [InDoorway(robby:robot, room14-0-3-bottom-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room14-0-4-left-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room14-0-3:room, room14-0-4-left-door:door, room14-0-4:room)
    Preconditions: [DoorInRoom(room14-0-4-left-door:door, room14-0-3:room), DoorInRoom(room14-0-4-left-door:door, room14-0-4:room), InDoorway(robby:robot, room14-0-4-left-door:door), InRoom(robby:robot, room14-0-3:room)]
    Add Effects: [InRoom(robby:robot, room14-0-4:room)]
    Delete Effects: [InRoom(robby:robot, room14-0-3:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room14-0-4-left-door:door]
_Option(name='MoveToDoor', objects=[robby:robot, room14-2-2-left-door:door], params=array([], dtype=float32))test
_Option(name='MoveThroughDoor', objects=[robby:robot, room14-2-2-left-door:door], params=array([], dtype=float32))test
[CogMan] Finishing episode.
Task 6 / 10: Policy failed to reach goal
[CogMan] Reset called.
Current Task Plan:
GroundNSRT-MoveToDoorFromMainRoom:
    Parameters: (robby:robot, room19-2-2:room, room19-1-2-bottom-door:door)
    Preconditions: [DoorInRoom(room19-1-2-bottom-door:door, room19-2-2:room), InMainRoom(robby:robot, room19-2-2:room), InRoom(robby:robot, room19-2-2:room)]
    Add Effects: [InDoorway(robby:robot, room19-1-2-bottom-door:door)]
    Delete Effects: [InMainRoom(robby:robot, room19-2-2:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room19-1-2-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room19-2-2:room, room19-1-2-bottom-door:door, room19-1-2:room)
    Preconditions: [DoorInRoom(room19-1-2-bottom-door:door, room19-1-2:room), DoorInRoom(room19-1-2-bottom-door:door, room19-2-2:room), InDoorway(robby:robot, room19-1-2-bottom-door:door), InRoom(robby:robot, room19-2-2:room)]
    Add Effects: [InRoom(robby:robot, room19-1-2:room)]
    Delete Effects: [InRoom(robby:robot, room19-2-2:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room19-1-2-bottom-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room19-1-2-bottom-door:door, room19-0-2-bottom-door:door)
    Preconditions: [DoorsShareRoom(room19-1-2-bottom-door:door, room19-0-2-bottom-door:door), InDoorway(robby:robot, room19-1-2-bottom-door:door)]
    Add Effects: [InDoorway(robby:robot, room19-0-2-bottom-door:door)]
    Delete Effects: [InDoorway(robby:robot, room19-1-2-bottom-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room19-0-2-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room19-1-2:room, room19-0-2-bottom-door:door, room19-0-2:room)
    Preconditions: [DoorInRoom(room19-0-2-bottom-door:door, room19-0-2:room), DoorInRoom(room19-0-2-bottom-door:door, room19-1-2:room), InDoorway(robby:robot, room19-0-2-bottom-door:door), InRoom(robby:robot, room19-1-2:room)]
    Add Effects: [InRoom(robby:robot, room19-0-2:room)]
    Delete Effects: [InRoom(robby:robot, room19-1-2:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room19-0-2-bottom-door:door]
_Option(name='MoveToDoor', objects=[robby:robot, room19-1-2-bottom-door:door], params=array([], dtype=float32))test
_Option(name='MoveThroughDoor', objects=[robby:robot, room19-1-2-bottom-door:door], params=array([], dtype=float32))test
Task 7 / 10: Approach failed at policy execution time with error: Unsound option policy.
[CogMan] Reset called.
Current Task Plan:
GroundNSRT-MoveToDoorFromMainRoom:
    Parameters: (robby:robot, room21-3-1:room, room21-2-1-bottom-door:door)
    Preconditions: [DoorInRoom(room21-2-1-bottom-door:door, room21-3-1:room), InMainRoom(robby:robot, room21-3-1:room), InRoom(robby:robot, room21-3-1:room)]
    Add Effects: [InDoorway(robby:robot, room21-2-1-bottom-door:door)]
    Delete Effects: [InMainRoom(robby:robot, room21-3-1:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room21-2-1-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room21-3-1:room, room21-2-1-bottom-door:door, room21-2-1:room)
    Preconditions: [DoorInRoom(room21-2-1-bottom-door:door, room21-2-1:room), DoorInRoom(room21-2-1-bottom-door:door, room21-3-1:room), InDoorway(robby:robot, room21-2-1-bottom-door:door), InRoom(robby:robot, room21-3-1:room)]
    Add Effects: [InRoom(robby:robot, room21-2-1:room)]
    Delete Effects: [InRoom(robby:robot, room21-3-1:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room21-2-1-bottom-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room21-2-1-bottom-door:door, room21-1-1-bottom-door:door)
    Preconditions: [DoorsShareRoom(room21-2-1-bottom-door:door, room21-1-1-bottom-door:door), InDoorway(robby:robot, room21-2-1-bottom-door:door)]
    Add Effects: [InDoorway(robby:robot, room21-1-1-bottom-door:door)]
    Delete Effects: [InDoorway(robby:robot, room21-2-1-bottom-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room21-1-1-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room21-2-1:room, room21-1-1-bottom-door:door, room21-1-1:room)
    Preconditions: [DoorInRoom(room21-1-1-bottom-door:door, room21-1-1:room), DoorInRoom(room21-1-1-bottom-door:door, room21-2-1:room), InDoorway(robby:robot, room21-1-1-bottom-door:door), InRoom(robby:robot, room21-2-1:room)]
    Add Effects: [InRoom(robby:robot, room21-1-1:room)]
    Delete Effects: [InRoom(robby:robot, room21-2-1:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room21-1-1-bottom-door:door]
_Option(name='MoveToDoor', objects=[robby:robot, room21-2-1-bottom-door:door], params=array([], dtype=float32))test
_Option(name='MoveThroughDoor', objects=[robby:robot, room21-2-1-bottom-door:door], params=array([], dtype=float32))test
Task 8 / 10: Approach failed at policy execution time with error: Unsound option policy.
[CogMan] Reset called.
Current Task Plan:
GroundNSRT-MoveToDoorFromMainRoom:
    Parameters: (robby:robot, room25-2-0:room, room25-2-1-left-door:door)
    Preconditions: [DoorInRoom(room25-2-1-left-door:door, room25-2-0:room), InMainRoom(robby:robot, room25-2-0:room), InRoom(robby:robot, room25-2-0:room)]
    Add Effects: [InDoorway(robby:robot, room25-2-1-left-door:door)]
    Delete Effects: [InMainRoom(robby:robot, room25-2-0:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room25-2-1-left-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room25-2-0:room, room25-2-1-left-door:door, room25-2-1:room)
    Preconditions: [DoorInRoom(room25-2-1-left-door:door, room25-2-0:room), DoorInRoom(room25-2-1-left-door:door, room25-2-1:room), InDoorway(robby:robot, room25-2-1-left-door:door), InRoom(robby:robot, room25-2-0:room)]
    Add Effects: [InRoom(robby:robot, room25-2-1:room)]
    Delete Effects: [InRoom(robby:robot, room25-2-0:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room25-2-1-left-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room25-2-1-left-door:door, room25-2-2-left-door:door)
    Preconditions: [DoorsShareRoom(room25-2-1-left-door:door, room25-2-2-left-door:door), InDoorway(robby:robot, room25-2-1-left-door:door)]
    Add Effects: [InDoorway(robby:robot, room25-2-2-left-door:door)]
    Delete Effects: [InDoorway(robby:robot, room25-2-1-left-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room25-2-2-left-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room25-2-1:room, room25-2-2-left-door:door, room25-2-2:room)
    Preconditions: [DoorInRoom(room25-2-2-left-door:door, room25-2-1:room), DoorInRoom(room25-2-2-left-door:door, room25-2-2:room), InDoorway(robby:robot, room25-2-2-left-door:door), InRoom(robby:robot, room25-2-1:room)]
    Add Effects: [InRoom(robby:robot, room25-2-2:room)]
    Delete Effects: [InRoom(robby:robot, room25-2-1:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room25-2-2-left-door:door]
_Option(name='MoveToDoor', objects=[robby:robot, room25-2-1-left-door:door], params=array([], dtype=float32))test
_Option(name='MoveThroughDoor', objects=[robby:robot, room25-2-1-left-door:door], params=array([], dtype=float32))test
Task 9 / 10: Approach failed at policy execution time with error: Unsound option policy.
[CogMan] Reset called.
Current Task Plan:
GroundNSRT-MoveToDoorFromMainRoom:
    Parameters: (robby:robot, room26-1-1:room, room26-1-1-left-door:door)
    Preconditions: [DoorInRoom(room26-1-1-left-door:door, room26-1-1:room), InMainRoom(robby:robot, room26-1-1:room), InRoom(robby:robot, room26-1-1:room)]
    Add Effects: [InDoorway(robby:robot, room26-1-1-left-door:door)]
    Delete Effects: [InMainRoom(robby:robot, room26-1-1:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room26-1-1-left-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room26-1-1:room, room26-1-1-left-door:door, room26-1-0:room)
    Preconditions: [DoorInRoom(room26-1-1-left-door:door, room26-1-0:room), DoorInRoom(room26-1-1-left-door:door, room26-1-1:room), InDoorway(robby:robot, room26-1-1-left-door:door), InRoom(robby:robot, room26-1-1:room)]
    Add Effects: [InRoom(robby:robot, room26-1-0:room)]
    Delete Effects: [InRoom(robby:robot, room26-1-1:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room26-1-1-left-door:door]
GroundNSRT-MoveToDoorFromDoorWay:
    Parameters: (robby:robot, room26-1-1-left-door:door, room26-1-0-bottom-door:door)
    Preconditions: [DoorsShareRoom(room26-1-1-left-door:door, room26-1-0-bottom-door:door), InDoorway(robby:robot, room26-1-1-left-door:door)]
    Add Effects: [InDoorway(robby:robot, room26-1-0-bottom-door:door)]
    Delete Effects: [InDoorway(robby:robot, room26-1-1-left-door:door)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveToDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room26-1-0-bottom-door:door]
GroundNSRT-MoveThroughDoor:
    Parameters: (robby:robot, room26-1-0:room, room26-1-0-bottom-door:door, room26-2-0:room)
    Preconditions: [DoorInRoom(room26-1-0-bottom-door:door, room26-1-0:room), DoorInRoom(room26-1-0-bottom-door:door, room26-2-0:room), InDoorway(robby:robot, room26-1-0-bottom-door:door), InRoom(robby:robot, room26-1-0:room)]
    Add Effects: [InRoom(robby:robot, room26-2-0:room)]
    Delete Effects: [InRoom(robby:robot, room26-1-0:room)]
    Ignore Effects: []
    Option: ParameterizedOption(name='MoveThroughDoor', types=[Type(name='robot'), Type(name='door')])
    Option Objects: [robby:robot, room26-1-0-bottom-door:door]
_Option(name='MoveToDoor', objects=[robby:robot, room26-1-1-left-door:door], params=array([], dtype=float32))test
_Option(name='MoveThroughDoor', objects=[robby:robot, room26-1-1-left-door:door], params=array([], dtype=float32))test
[CogMan] Finishing episode.
Task 10 / 10: Policy failed to reach goal
Tasks solved: 0 / 10
Average time for successes: inf seconds
Test results: defaultdict(<class 'float'>, {'num_solved': 0, 'num_total': 10, 'avg_suc_time': inf, 'avg_ref_cost': inf, 'min_num_samples': 0.0, 'max_num_samples': 0.0, 'min_skeletons_optimized': 1.0, 'max_skeletons_optimized': 1.0, 'num_solve_timeouts': 0, 'num_solve_failures': 0, 'num_execution_timeouts': 0, 'num_execution_failures': 7, 'avg_num_samples': 0.0, 'avg_num_skeletons_optimized': 1.0, 'avg_num_nodes_expanded': 7.0, 'avg_num_nodes_created': 32.5, 'avg_num_nsrts': 4.0, 'avg_num_preds': 5.0, 'avg_plan_length': 0.0, 'avg_num_failures_discovered': 0.0, 'num_offline_transitions': 0, 'num_online_transitions': 0, 'query_cost': 0.0, 'learning_time': 0.0})
Wrote out test results to results/doorknobs__oracle__2______RLBRIDGE_doorknobs-oracle__None.pkl


Main script terminated in 51.57298 seconds
GETTING TASK
GETTING TASK
GETTING TASK
GETTING TASK
GETTING TASK
GETTING TASK
GETTING TASK
GETTING TASK
GETTING TASK
GETTING TASK
GETTING TASK
